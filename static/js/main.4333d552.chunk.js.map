{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMosnters","filter","toLocaleLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAGaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAK,UAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACxB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCHbC,G,MAAW,SAACR,GACrB,OAAQ,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHzDM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,uBACOZ,UAAY,SACZa,KAAK,SACJF,YAAeA,EACfG,SAAUF,MCyCPG,E,kDA1Cb,aAAc,IAAD,8BACX,gBAcFH,aAAe,SAAAI,GAAM,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZxD,EAAKC,MAAO,CACVb,SAAW,GACXU,YAAa,IALJ,E,gEASO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAKjC,IAAD,EAE0BC,KAAKN,MAA9Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,oBAAoBC,SAASb,EAAYY,wBAG1D,OACE,sBAAK9B,UAAU,MAAf,UAEI,kDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CACEJ,SAAUoB,W,GApCJI,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4333d552.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt={'monster'} src={`https://robohash.org/${props.monster.id}?set=set4&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react'\r\nimport {Card} from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => {\r\n    return (<div className='card-list'>\r\n                {\r\n                    props.monsters.map(monster => (<Card key={monster.id} monster={monster}/>))\r\n                }\r\n            </div>)\r\n}","import React from 'react'\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n\r\n    <input \r\n           className = 'search'\r\n           type='search' \r\n            placeholder = {placeholder} \r\n            onChange={handleChange}\r\n    />\r\n)","import React from 'react'\nimport './App.css';\n\nimport {CardList} from './components/card-list/card-list.component'\n\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n\n    this.state= {\n      monsters : [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = e => {this.setState({searchField: e.target.value})}\n\n  render(){\n\n    const {monsters, searchField} = this.state;\n    const filteredMosnters = monsters.filter(monster => \n        monster.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n      )\n\n    return (\n      <div className=\"App\">\n\n          <h1>Monsters Rolodex</h1>\n          <SearchBox \n            placeholder='search monsters' \n            handleChange={this.handleChange} \n          />\n\n          <CardList \n            monsters={filteredMosnters} \n          />\n\n     </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}